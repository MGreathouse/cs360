; Program adds 2 packed values in 'array' based on stored values
;
; inputs:
;   all inputs will be internal in x3101(N) and the following (N/2) memory values
;
; output:
;   no output as output, but memory location x3100 will have sum stored in them that are answer to the program
;
; register usage:
;   R0: value in x3101 and then loop counter
;   R1: #2 (divisor) and then address of value being added
;   R2: #1 - used the shift the value and then value being added
;   R3: scratch value area
;   R4: holds answer
;   R5: #8000
;   R6: scratch value area
;   R7: scratch value area
;
; Memory Usage:
;   x3100: holds value to be reversed
;   x3300: holds answer
;
0011 0000 0000 0000 ; starting location set to x3000
;
; Initialization
1010 000 000000001          ; set R0 to the value in x3101
0000 111 000000001          ; branch over indirect load value
0011 0001 0000 0001         ; points to x3101
0010 001 000000001          ; set R1 to value in x3005
0000 111 000000001          ; branch over indirect load value
0000 0000 0000 0010         ; value x0002
1001 100 001 111111         ; inverts the divisor as first step of making it negative
0001 100 100 1 00001        ; adds one finsihing making it negative
;
; Loop division until complete
0001 000 000 0 00 100       ; adds R0 to negative divisor and stores in place
0000 010 000000011          ; branch out of loop if zero (+3)
0000 100 000000100          ; branch out of loop if negative (+4) (should never happen)
0001 010 010 1 00001        ; increment integer counter
0000 111 111111011          ; jump to beginning of loop (-5)
;
; Do final calculations and prep for saving 
0001 010 010 1 00001        ; increment integer counter
0001 011 000 0 00 001       ; gives remainder if not 0 - useless, but leaving in for now
;
; Starts doing addition prep - Registers get shifted over to secondary use
0001 000 010 1 00000        ; set R0 to integer value in R2
0101 100 100 1 00000        ; set R4 to 0

0010 101 000000001          ; set R5 to #8000  -- left in since I did not remove before doing jumps backwards over it - not re-doing math when it works
0000 111 000000001          ; branch over indirect load value
0000 0000 0000 0010         ; value x8000

0010 101 000000001          ; set R5 to #00FF
0000 111 000000001          ; branch over indirect load value
0000 0000 1111 1111         ; value x00FF
;
; Addition loop
0010 001 000000001          ; set R1 to value two lines down
0000 111 000000001          ; branch over indirect load value
0011 0001 0000 0001         ; value x3101

0001 001 001 1 00001        ; add 1 to address location in R1 - real start of loop
0110 010 001 000000         ; load value at address in R1 into R2

0101 011 101 0 00 010       ; R5 AND R2 -> R3 (gets right nibble)
0001 100 100 0 00 011       ; Add R3 to R4 and store in R4
1001 101 101 111111         ; inverts R5
0101 010 010 0 00 101       ; zeroes out right nibble of R2
1001 101 101 111111         ; inverts R5

0001 110 110 1 01000        ; set R6 to #8
0101 111 111 1 00000        ; set R7 to 0
0001 010 010 1 11110        ; subtract 2 from R2 and store it in place
0000 100 000000100          ; branch out of loop if needed (+4)
0000 010 000000010          ; branch out of loop if needed and increment (+2)
0001 111 111 1 00001        ; increment counter
0000 111 111111011          ; jump to beginning of division loop (-5) 
0001 111 111 1 00001        ; adds extra 1 if jumping out at 0
0001 010 111 1 00000        ; set R2 to R7
0001 110 110 1 11111        ; subtract 1 from counter
0000 001 111111000          ; jumps to divide by two again if still positive

0001 100 100 0 00 011       ; Add R3 to R4 and store in R4
0001 000 000 1 11111        ; decrement main counter
0000 001 111101011          ; go back 21 spots to loop if it still needs to loop

;
; Store the value in x3101 and halts program
1011 100 000000001          ; stores R4 in x3100
0000 111 000000001          ; skips the storage location
0011 0001 0000 0000         ; points to x3100
1111 0000 0010 0101         ; halts program