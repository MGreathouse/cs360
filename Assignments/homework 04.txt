4.01)   Memory:             stores data and programs
        Processing Unit:    processes information
        Input:              what users use to enter information
        Output:             how information is displayed for the user
        Control Unit:       keeps everything doing what it should


4.02)    Its reads the value in the MDR based on the MAR it is interacting with and then stores anything it is going to keep working on in the register because of the inneficiency of reading and writing data to memory.


4.03)    the program counter actual points to the location in memory that contains the next instruction


4.04)    The word length is size of the data chunks that get processed by the processsing unit and the size of the word length dtermines how much data can be processed at once as well as how much memory can be used by the machine. No, at least as long as what is being processed cannot be broken down into a small enough size to fit within the contraints of the lesser of the two. As long as it can, it would just take longer for the smaller of the two to calculate the information out as long as they performed the same number of calculations in the same ammount of time.


4.05)    a) 3 - 0000 0000 0000 0000
            6 - 1111 1110 1101 0011
         b) 1) 7747, -4059
            2) c
            3) 0000 0110 1101 1001 1111 1110 1101 0011 (I think they need to be in reverse order like this to ake a single 32bit number, though no clue how to convert it to appear as a floating point number if I have to do more than this)
            4) 0 - 7747
               1 - 61477
         c) Add r7 r1 r3
         d) refers to r6 which is 1111 1110 1101 0011


4.06)    The opcode and operands. The opcode is the operation that is going to be done and the the operands are the values and lcations that are going to be used in the operation.


4.07)    -32768 to 32767


4.08)    a) 8 bit
         b) 7 bit
         c) 3 bit


4.09)    It sets the program counter to the next instruction's address


4.10)    This question is unclear


4.11)    fetch, decode, evaluate address, fetch operands, execute, store result
        fetch: gets instruction and sets program encounter to next instruction
        decode: figure out what the indtruction does
        evaluate address: finds memory locations needed to complete the instruction
        fetch operands: gets operands to omplete the instruction
        stroe result: stores the result


4.12)    Assuming this is taking place in the LC-3, fetch gets the instruction and then sets the program counter to the next instruction location which the ADD?LDR/JMP instruction had a pointer to. The decode phase takes the instruction adn reads the first four bits to determine the type of instruction being used and form that determines what else is needed by determining which operators are in the remaining 12 bits. The it determines where each address required for the operation is located. Then the values needed at addresses indicated are obtained. The operation is then executed and the result stored. For ADD there is no need for evaulating the address and LDR does not need the execute phase.


4.13)    IA-32) Fetch = 100, Decode = 1, evaluate addresses = 1, fetch operands = 100, execute = 1, store results = 100, TOTAL = 303 cycles
         LC-3) Fetch = 100, Decode = 1, evaluate addresses = 0 (ADD has no non-register operands), fetch operands = 1, execute = 1, store results = 1 (stored in a register), TOTAL = 104 cycles


4.14)    When JMP is executed, it will set the program counter to the value in R3 (x369C) so the next instruction will be whatever is stored in the MAR at x369C instead of whatever was going to be next.


4.15)    Nothing at this point since no instructions will be processes until something (external, so likely a user action) sets the RUN latch.


4.16)    a) 500,000,000 cycles/second
         b) 62,500,000 instructions/second
         c) 499,999,992 instructions/second starting at the first second. After that, the full 500,000,000 instructions could go through a second assuming this perfect world scenario occurs.